help()
?help
demo(smooth)
x <- sqrt(12)
x
library(Rcmdr)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages("knitr")
install.packages("knitr")
install.packages('knitr', dependencies = TRUE)
update.packages()
library(ISLR)
install.packages("ISLR")
install.packages("ISLR")
library(knitr)
library(markdown)
```{r}
library(ISLR)
summary(Hitters)
```
library(ISLR)
summary(Hitters)
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
library(leaps)
regfit.full=regsubsets(Salary~.,data=Hitters)
summary(regfit.full)
library(knitr)
library(markdown)
M <- matrix(rnorm(100), ,4)
apply(M, 2, hist)
M <- matrix(rnorm(100), ,4)
apply(M, 2, hist)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
library(knitr)
library(markdown)
M <- matrix(rnorm(100), ,4)
apply(M, 2, hist)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
M <- matrix(rnorm(100), ,4)
apply(M, 2, hist)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
library(knitr)
library(markdown)
setwd("D:/r/RepData_PeerAssessment1")
?unzip
unzip("activity.zip")
activity <- read.csv("activity.csv", header = TRUE)
activity.full=activity[!is.na(activity$steps),]
library(ggplot2)
library(ggplot2)
?aggregate
?list
View(activity.full)
aggregate.date <- aggregate(activity.full$steps,
by=activity.full$date,FUN=sum)
aggregate.date <- aggregate(activity.full$steps,
by=list(activity.full$date),FUN=sum)
View(aggregate.date)
View(aggregate.date)
plot(aggregate.date$Group1, aggregate.date$x)
View(aggregate.date)
?plot
plot(x=aggregate.date$Group1, y=aggregate.date$x)
aggregate.date$Group1
plot(x=aggregate.date$Group.1, y=aggregate.date$x)
?plot
plot(x=aggregate.date$Group.1, y=aggregate.date$x, type=h)
plot(x=aggregate.date$Group.1, y=aggregate.date$x, type="h"")
plot(x=aggregate.date$Group.1, y=aggregate.date$x, type="h")
plot(x=aggregate.date$Group.1, y=aggregate.date$x, type="h")
?plot
?barchat
> plot(x=aggregate.date$Group.1, y=aggregate.date$x, type="h")
barplot(x=aggregate.date$Group.1, y=aggregate.date$x)
barplot(aggregate.date)
barplot(aggregate.date)
plot(x=aggregate.date$Group.1, y=aggregate.date$x, type="o")
?plot
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(x=aggregate.date$Group.1, y=aggregate.date$x, type="h",
col = "red", lwd = 10,)
plot(x=aggregate.date$Group.1, y=aggregate.date$x, type="h",
col = "red", lwd = 1)
plot(x=aggregate.date$Group.1, y=aggregate.date$x, type="h",
col = "red", lwd = 100)
col = "red", lwd =2)
plot(x=aggregate.date$Group.1, y=aggregate.date$x, type="h",
col = "red", lwd =2)
hist(aggregate.date$x)
hist(aggregate.date$x, breaks = 20)
hist(aggregate.date$x, breaks = 30)
hist(aggregate.date$x, breaks = 40)
hist(aggregate.date$x, breaks = 30)
hist(aggregate.date$x, breaks = 50)
hist(aggregate.date$x, breaks = 35)
```
hist(aggregate.date$x, breaks = 35)
hist(aggregate.date$x, breaks = 30)
hist(aggregate.date$x, breaks = 35)
hist(aggregate.date$x, breaks = 35, xlab="Steps per day",
aggregate.date <- aggregate(activity.full$steps,
by=list(activity.full$date),FUN=sum)
hist(aggregate.date$x, breaks = 35, xlab="Steps per day",
main="Total number of steps per day")
aggregate.date <- aggregate(activity.full$steps,
by=list(activity.full$date),FUN=sum)
hist(aggregate.date$x, breaks = 35, xlab="Steps per day",
main="Total number of steps per day")
mean.steps <- mean(aggregate.date$x)
mean.steps <- mean(aggregate.date$x)
median.steps <- median(aggregate.date$x)
mean.steps
median.steps
aggregate.interval <- aggregate(activity.full$steps,
by=list(activity.full$interval),FUN=mean)
View(aggregate.interval)
ggplot(aggregate.interval, aes(aggregate.interval$Group.1,
aggregate.interval$x,color='red'))
+ geom_point()+geom_line()
+ labs(title="Average Number of Steps Across all Days",
x="Intervals", y="Days")
ggplot(aggregate.interval, aes(aggregate.interval$Group.1,
aggregate.interval$x,color='red'))
+geom_point()+geom_line()
+labs(title="Average Number of Steps Across all Days",
x="Intervals", y="Days")
ggplot(aggregate.interval, aes(aggregate.interval$Group.1,
aggregate.interval$x, color='red'))
library(ggplot2)
ggplot(aggregate.interval, aes(aggregate.interval$Group.1,
aggregate.interval$x, color='red'))
aggregate.interval$Group.1
aggregate.interval$x
ggplot(aggregate.interval,aes(aggregate.interval$Group.1,
aggregate.interval$x, color='red'))
ggplot(aggregate.interval, aes(aggregate.interval$Group.1,
aggregate.interval$x, color='red'))
+geom_point()+geom_line()
+labs(title="Average Number of Steps Across all Days",
x="Intervals", y="Days")
gplot <- ggplot(aggregate.interval, aes(aggregate.interval$Group.1,
aggregate.interval$x, color='red'))
gplot +geom_point()+geom_line()
gplot +labs(title="Average Number of Steps Across all Days",
x="Intervals", y="Days")
gplot <- ggplot(aggregate.interval, aes(aggregate.interval$Group.1,
aggregate.interval$x, color='red'))
gplot +geom_point()+geom_line()
+labs(title="Average Number of Steps Across all Days",
x="Intervals", y="Days")
gplot <- ggplot(aggregate.interval, aes(aggregate.interval$Group.1,
aggregate.interval$x, color='red'))
gplot <- gplot +geom_point()+geom_line()
gplot +labs(title="Average Number of Steps Across all Days",
x="Intervals", y="Days")
View(aggregate.interval)
View(activity)
View(activity)
View(aggregate.interval)
View(aggregate.interval)
maxint <- aggregate.interval$Group.1[max(aggregate.interval$x)]
maxint
max(aggregate.interval$x)
?sort
sort(aggregate.interval)
sort(aggregate.interval$x)
sort(aggregate.interval$x, decreasing = TRUE)
maxint <- aggregate.interval$Group.1[aggregate.interval$x=max(aggregate.interval$x)]
maxint <- aggregate.interval$Group.1[aggregate.interval$x==max(aggregate.interval$x)]
maxint
Dataset contains `r nas`missing values.
na
nas <- sum(is.NA(activity$steps))
nas <- sum(is.na(activity$steps))
activity$steps2 <- activity$steps
activity$steps2[activity$steps2==NA] <- mean(activity$steps, na.rm = TRUE)
activity.without.nas = data.frame(steps = activity$steps2,
date = activity$date, interval = activity$interval)
View(activity.without.nas)
View(activity)
activity$steps2[activity$steps2==NA]
mean(activity$steps, na.rm = TRUE)
activity$steps2[activity$steps2==NA] <- mean(activity$steps, na.rm = TRUE)
View(activity)
activity$steps2[activity$steps2=NA] <- mean(activity$steps, na.rm = TRUE)
activity$steps2[activity$steps2=="NA"] <- mean(activity$steps, na.rm = TRUE)
View(activity)
activity$steps2==NA
a <- NA
a=NA
a==NA
is.na(a)
a == NA
activity$steps2[is.na(activity$steps2)] <- mean(activity$steps, na.rm = TRUE)
View(activity)
activity.without.nas = data.frame(steps = activity$steps2,
date = activity$date, interval = activity$interval)
View(activity.without.nas)
View(activity)
steps2 <- activity$steps
steps2
head(activity.without.nas)
activity.without.nas2$weekdayType <- ifelse(weekdays(
activity.without.nas$date) %in% c("Satuday", "Sunday"),
"weekend", "weekday")
?weekdays
activity.without.nas$weekdayType <- ifelse(weekdays(
activity.without.nas$date) %in% c("Satuday", "Sunday"),
"weekend", "weekday")
activity.without.nas$weekdayType <- ifelse(weekdays(activity.without.nas$date) %in%
c("Satuday", "Sunday"),
"weekend", "weekday")
activity.without.nas$weekdayType <- ifelse(weekdays(as.date(activity.without.nas$date) %in%
c("Satuday", "Sunday"),
"weekend", "weekday")
activity.without.nas$weekdayType <- ifelse(weekdays(as.Date(activity.without.nas$date)) %in%
c("Satuday", "Sunday"), "weekend", "weekday")
activity.without.nas$weekdayType <- ifelse(weekdays(as.Date(activity.without.nas$date)) %in% c("Satuday", "Sunday"), "weekend", "weekday")
View(activity.without.nas)
sum(activity.without.nas$weekdayType)
summary(activity.without.nas$weekdayType)
str(activity.without.nas$weekdayType)
levels(activity.without.nas$weekdayType)
levels(as.factor(activity.without.nas$weekdayType))
?ifelse
library(plyr)
library(lattice)
averagenew
averagenew <- ddply(activity.without.nas, .(interval, Days), summarize,
steps = mean(steps, na.rm = TRUE))
daytype <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
activity.without.nas$Days <- as.factor(sapply(activity.without.nas$date, daytype))
head(activity.without.nas)
averagenew <- ddply(activity.without.nas, .(interval, Days), summarize,
steps = mean(steps, na.rm = TRUE))
averagenew
View(activity.without.nas)
xyplot(steps ~ interval | Days, data = averagenew, type = "l", layout = c(1,2))
library(dplyr)
aggregate.interval2 <- activity.without.nas %.% group_by(interval, Says) %.% summarise(meanSteps = mean(steps, na.rm = TRUE))
gplot2 <- ggplot(data = aggregate.interval2, mapping = aes(x = interval, y = meanSteps)) +
geom_line() + facet_grid(Days ~ .) + scale_x_continuous("Day Interval",
breaks = seq(min(aggregate.interval2$interval), max(aggregate.interval2$interval), 100)) + scale_y_continuous("Average Number of Steps") + ggtitle("Average Number of Steps Taken by Interval")
gplot2
library(dplyr)
aggregate.interval2 <- activity.without.nas %.% group_by(interval, Days) %.% summarise(meanSteps = mean(steps, na.rm = TRUE))
gplot2 <- ggplot(data = aggregate.interval2, mapping = aes(x = interval, y = meanSteps)) +
geom_line() + facet_grid(Days ~ .) + scale_x_continuous("Day Interval",
breaks = seq(min(aggregate.interval2$interval), max(aggregate.interval2$interval), 100)) + scale_y_continuous("Average Number of Steps") + ggtitle("Average Number of Steps Taken by Interval")
gplot2
weekdays(as.Date(activity.without.nas$date))
?days
?weekdays
activity.without.nas$Days <- ifelse(weekdays(activity.without.nas$date) %in% c("Satuday", "Sunday"), "weekend", "weekday")
activity.without.nas$Days <- ifelse(weekdays(as.Date((activity.without.nas$date)
%in% c("Satuday", "Sunday"), "weekend", "weekday")
head(activity.without.nas)
activity.without.nas$Days <- ifelse(weekdays(as.Date(activity.without.nas$date)
%in% c("Satuday", "Sunday"), "weekend", "weekday")
head(activity.without.nas)
activity.without.nas$Days <- ifelse(weekdays(as.Date(activity.without.nas$date))
%in% c("Satuday", "Sunday"), "weekend", "weekday")
head(activity.without.nas)
activity.without.nas$Days <- ifelse(weekdays(as.Date(activity.without.nas$date))
%in% c("Суббота", "воскресенье"), "weekend", "weekday")
head(activity.without.nas)
library(plyr)
averagenew <- ddply(activity.without.nas, .(interval, Days), summarize,
steps = mean(steps, na.rm = TRUE))
library(lattice)
xyplot(steps ~ interval | Days, data = averagenew, type = "l", layout = c(1,2))
